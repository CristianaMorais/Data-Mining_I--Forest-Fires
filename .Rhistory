require(graphics)
library(rpart)
library(rpart.plot)
require(randomForest)
clean_pre_processing_data <- function(file) {
file <- file %>% select(-c("extinction_date","extinction_hour", "firstInterv_date", "firstInterv_hour", "alert_source"))
# Fill the missing values
file <- file %>% arrange(region) %>% group_by(district) %>% fill(region)
# Normalize the areas values
file$total_area <- file %>% mutate(total_area = as.numeric(transform(total_area, method = "minmax"))) %>% pull(total_area)
file$timePeriod <- NA
for(x in 1:length(file$id)) {
if(isTRUE(file$alert_hour[x]<as.difftime("06:00:00"))){
file$timePeriod[x] = "Madrugada"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("12:00:00"))){
file$timePeriod[x] ="Manhã"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("18:00:00"))){
file$timePeriod[x] ="Tarde"
}
else if(isTRUE(file$alert_hour[x]<=as.difftime("23:59:59"))){
file$timePeriod[x] = "Noite"
}
}
file$lat <- gsub('1900-01-01','',file$lat)
file$lat <- str_replace(file$lat,',','.')
file$lon <- str_replace(file$lon,',','.')
file$lat <- strtrim(file$lat, 9)
file$lon <- strtrim(file$lon, 9)
# Format the latitude and longitude
file <- file %>% mutate(lat=parse_lat(lat), lon=parse_lon(lon))
file <- file %>% mutate(lat = na_if(lat, "NaN"), lon = na_if(lon, "NaN"))
# Convert the alert_date for the correct format
file <- file %>% mutate(alert_date=format(alert_date,format="%Y-%m-%d"))
# Return the file "clean"
return (file)
}
get_temperature <- function(tempdata){
options(noaakey = "mqEuOSuAUjyuGlTjVjxxCpzRlbrooRnr")
load("station_data.Rdata")
for(i in 1: length(tempdata$id)){
df <- data.frame(
id = c(tempdata$district[i]),
latitude = c(tempdata$lat[i]),
longitude = c(tempdata$lon[i]),
stringsAsFactors = FALSE
)
#Get nearby stations that can provide the mean average temperature (TAVG)
nearby_stations <-  meteo_nearby_stations(lat_lon_df = df,
station_data = station_data, radius = 1000,
var = c("TMAX"),
year_min = 2014, year_max = 2015)
#Get TMAX data
weather_data <- ghcnd_search(nearby_stations[[1]]$id[3], var = c("TMAX") , date_min = tempdata$alert_date[i] , date_max = tempdata$alert_date[i])
temp <- do.call(rbind.data.frame, weather_data['tmax'])
print(tempdata$id[i])
tempdata$tmax[i] <- temp$tmax[1]
}
return(tempdata)
}
############ Task 1: Data importation, clean-up and pre-processing ############
# Data clean-up and pre-processing steps.
fires_train <- read_csv("fires_train.csv", na= c("NA","", "-"), col_names = TRUE)
fires_test <- read_csv("fires_test.csv", na= c("NA","", "-"), col_names = TRUE)
# Preparing the files for Task 2
fires_train <- clean_pre_processing_data(fires_train)
fires_test <- clean_pre_processing_data(fires_test)
fires_train <- fires_train[-c(10:10309), ]
# Initialize the column of the temperatures
fires_train$tmax <- NA
fires_test$tmax <- NA
# Get the temperatures
fires_train <- get_temperature(fires_train)
new3 <- get_temperature(fires_train)
maxTemp <- max(new3$tmax, na.rm = TRUE)
print(maxTemp)
minTemp <- min(new3$tmax, na.rm = TRUE)
print(minTemp)
media= mean(new3$tmax)
print(media)
media= mean(new3$tmax,na.rm= TRUE)
print(media)
library(readr)
library(dplyr)
library(tidyverse)
library(dlookr)
library(parzer)
library('rnoaa')
library(base)
require(devtools)
require(graphics)
library(rpart)
library(rpart.plot)
require(randomForest)
clean_pre_processing_data <- function(file) {
file <- file %>% select(-c("extinction_date","extinction_hour", "firstInterv_date", "firstInterv_hour", "alert_source"))
# Fill the missing values
file <- file %>% arrange(region) %>% group_by(district) %>% fill(region)
# Normalize the areas values
file$total_area <- file %>% mutate(total_area = as.numeric(transform(total_area, method = "minmax"))) %>% pull(total_area)
file$timePeriod <- NA
for(x in 1:length(file$id)) {
if(isTRUE(file$alert_hour[x]<as.difftime("06:00:00"))){
file$timePeriod[x] = "Madrugada"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("12:00:00"))){
file$timePeriod[x] ="Manhã"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("18:00:00"))){
file$timePeriod[x] ="Tarde"
}
else if(isTRUE(file$alert_hour[x]<=as.difftime("23:59:59"))){
file$timePeriod[x] = "Noite"
}
}
file$lat <- gsub('1900-01-01','',file$lat)
file$lat <- str_replace(file$lat,',','.')
file$lon <- str_replace(file$lon,',','.')
file$lat <- strtrim(file$lat, 9)
file$lon <- strtrim(file$lon, 9)
# Format the latitude and longitude
file <- file %>% mutate(lat=parse_lat(lat), lon=parse_lon(lon))
file <- file %>% mutate(lat = na_if(lat, "NaN"), lon = na_if(lon, "NaN"))
# Convert the alert_date for the correct format
file <- file %>% mutate(alert_date=format(alert_date,format="%Y-%m-%d"))
# Return the file "clean"
return (file)
}
get_temperature <- function(tempdata){
options(noaakey = "mqEuOSuAUjyuGlTjVjxxCpzRlbrooRnr")
load("station_data.Rdata")
for(i in 1: length(tempdata$id)){
df <- data.frame(
id = c(tempdata$district[i]),
latitude = c(tempdata$lat[i]),
longitude = c(tempdata$lon[i]),
stringsAsFactors = FALSE
)
#Get nearby stations that can provide the mean average temperature (TAVG)
nearby_stations <-  meteo_nearby_stations(lat_lon_df = df,
station_data = station_data, radius = 1000,
var = c("TMAX"),
year_min = 2014, year_max = 2015)
#Get TMAX data
weather_data <- ghcnd_search(nearby_stations[[1]]$id[3], var = c("TMAX") , date_min = tempdata$alert_date[i] , date_max = tempdata$alert_date[i])
temp <- do.call(rbind.data.frame, weather_data['tmax'])
print(tempdata$id[i])
tempdata$tmax[i] <- temp$tmax[1]
}
return(tempdata)
}
############ Task 1: Data importation, clean-up and pre-processing ############
# Data clean-up and pre-processing steps.
fires_train <- read_csv("fires_train.csv", na= c("NA","", "-"), col_names = TRUE)
fires_test <- read_csv("fires_test.csv", na= c("NA","", "-"), col_names = TRUE)
# Preparing the files for Task 2
fires_train <- clean_pre_processing_data(fires_train)
fires_test <- clean_pre_processing_data(fires_test)
fires_train <- fires_train[-c(10:10309), ]
# Initialize the column of the temperatures
fires_train$tmax <- NA
fires_test$tmax <- NA
# Get the temperatures
fires_train <- get_temperature(fires_train)
#fires_test <- get_temperature(fires_train)
fires_train$tmax <- fires_train %>%
imputate_na(tmax,method = "mean")
View(fires_train)
library(readr)
library(dplyr)
library(tidyverse)
library(dlookr)
library(parzer)
library('rnoaa')
library(base)
require(devtools)
require(graphics)
library(rpart)
library(rpart.plot)
require(randomForest)
clean_pre_processing_data <- function(file) {
file <- file %>% select(-c("extinction_date","extinction_hour", "firstInterv_date", "firstInterv_hour", "alert_source"))
# Fill the missing values
file <- file %>% arrange(region) %>% group_by(district) %>% fill(region)
# Normalize the areas values
file$total_area <- file %>% mutate(total_area = as.numeric(transform(total_area, method = "minmax"))) %>% pull(total_area)
file$timePeriod <- NA
for(x in 1:length(file$id)) {
if(isTRUE(file$alert_hour[x]<as.difftime("06:00:00"))){
file$timePeriod[x] = "Madrugada"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("12:00:00"))){
file$timePeriod[x] ="Manhã"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("18:00:00"))){
file$timePeriod[x] ="Tarde"
}
else if(isTRUE(file$alert_hour[x]<=as.difftime("23:59:59"))){
file$timePeriod[x] = "Noite"
}
}
file$lat <- gsub('1900-01-01','',file$lat)
file$lat <- str_replace(file$lat,',','.')
file$lon <- str_replace(file$lon,',','.')
file$lat <- strtrim(file$lat, 9)
file$lon <- strtrim(file$lon, 9)
# Format the latitude and longitude
file <- file %>% mutate(lat=parse_lat(lat), lon=parse_lon(lon))
file <- file %>% mutate(lat = na_if(lat, "NaN"), lon = na_if(lon, "NaN"))
# Convert the alert_date for the correct format
file <- file %>% mutate(alert_date=format(alert_date,format="%Y-%m-%d"))
# Return the file "clean"
return (file)
}
get_temperature <- function(tempdata){
options(noaakey = "mqEuOSuAUjyuGlTjVjxxCpzRlbrooRnr")
load("station_data.Rdata")
for(i in 1: length(tempdata$id)){
df <- data.frame(
id = c(tempdata$district[i]),
latitude = c(tempdata$lat[i]),
longitude = c(tempdata$lon[i]),
stringsAsFactors = FALSE
)
#Get nearby stations that can provide the mean average temperature (TAVG)
nearby_stations <-  meteo_nearby_stations(lat_lon_df = df,
station_data = station_data, radius = 1000,
var = c("TMAX"),
year_min = 2014, year_max = 2015)
#Get TMAX data
weather_data <- ghcnd_search(nearby_stations[[1]]$id[3], var = c("TMAX") , date_min = tempdata$alert_date[i] , date_max = tempdata$alert_date[i])
temp <- do.call(rbind.data.frame, weather_data['tmax'])
print(tempdata$id[i])
tempdata$tmax[i] <- temp$tmax[1]
}
return(tempdata)
}
############ Task 1: Data importation, clean-up and pre-processing ############
# Data clean-up and pre-processing steps.
fires_train <- read_csv("fires_train.csv", na= c("NA","", "-"), col_names = TRUE)
fires_test <- read_csv("fires_test.csv", na= c("NA","", "-"), col_names = TRUE)
# Preparing the files for Task 2
fires_train <- clean_pre_processing_data(fires_train)
#fires_test <- clean_pre_processing_data(fires_test)
fires_train <- fires_train[-c(10:10309), ]
# Initialize the column of the temperatures
fires_train$tmax <- NA
fires_test$tmax <- NA
# Get the temperatures
fires_train <- get_temperature(fires_train)
#fires_test <- get_temperature(fires_train)
fires_train <- fires_train %>%
imputate_na(tmax,method = "mean")
library(readr)
library(dplyr)
library(tidyverse)
library(dlookr)
library(parzer)
library('rnoaa')
library(base)
require(devtools)
require(graphics)
library(rpart)
library(rpart.plot)
require(randomForest)
clean_pre_processing_data <- function(file) {
file <- file %>% select(-c("extinction_date","extinction_hour", "firstInterv_date", "firstInterv_hour", "alert_source"))
# Fill the missing values
file <- file %>% arrange(region) %>% group_by(district) %>% fill(region)
# Normalize the areas values
file$total_area <- file %>% mutate(total_area = as.numeric(transform(total_area, method = "minmax"))) %>% pull(total_area)
file$timePeriod <- NA
for(x in 1:length(file$id)) {
if(isTRUE(file$alert_hour[x]<as.difftime("06:00:00"))){
file$timePeriod[x] = "Madrugada"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("12:00:00"))){
file$timePeriod[x] ="Manhã"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("18:00:00"))){
file$timePeriod[x] ="Tarde"
}
else if(isTRUE(file$alert_hour[x]<=as.difftime("23:59:59"))){
file$timePeriod[x] = "Noite"
}
}
file$lat <- gsub('1900-01-01','',file$lat)
file$lat <- str_replace(file$lat,',','.')
file$lon <- str_replace(file$lon,',','.')
file$lat <- strtrim(file$lat, 9)
file$lon <- strtrim(file$lon, 9)
# Format the latitude and longitude
file <- file %>% mutate(lat=parse_lat(lat), lon=parse_lon(lon))
file <- file %>% mutate(lat = na_if(lat, "NaN"), lon = na_if(lon, "NaN"))
# Convert the alert_date for the correct format
file <- file %>% mutate(alert_date=format(alert_date,format="%Y-%m-%d"))
# Return the file "clean"
return (file)
}
get_temperature <- function(tempdata){
options(noaakey = "mqEuOSuAUjyuGlTjVjxxCpzRlbrooRnr")
load("station_data.Rdata")
for(i in 1: length(tempdata$id)){
df <- data.frame(
id = c(tempdata$district[i]),
latitude = c(tempdata$lat[i]),
longitude = c(tempdata$lon[i]),
stringsAsFactors = FALSE
)
#Get nearby stations that can provide the mean average temperature (TAVG)
nearby_stations <-  meteo_nearby_stations(lat_lon_df = df,
station_data = station_data, radius = 1000,
var = c("TMAX"),
year_min = 2014, year_max = 2015)
#Get TMAX data
weather_data <- ghcnd_search(nearby_stations[[1]]$id[3], var = c("TMAX") , date_min = tempdata$alert_date[i] , date_max = tempdata$alert_date[i])
temp <- do.call(rbind.data.frame, weather_data['tmax'])
print(tempdata$id[i])
tempdata$tmax[i] <- temp$tmax[1]
}
return(tempdata)
}
############ Task 1: Data importation, clean-up and pre-processing ############
# Data clean-up and pre-processing steps.
fires_train <- read_csv("fires_train.csv", na= c("NA","", "-"), col_names = TRUE)
fires_test <- read_csv("fires_test.csv", na= c("NA","", "-"), col_names = TRUE)
# Preparing the files for Task 2
fires_train <- clean_pre_processing_data(fires_train)
#fires_test <- clean_pre_processing_data(fires_test)
fires_train <- fires_train[-c(10:10309), ]
# Initialize the column of the temperatures
fires_train$tmax <- NA
fires_test$tmax <- NA
# Get the temperatures
fires_train <- get_temperature(fires_train)
#fires_test <- get_temperature(fires_train)
fires_train <- fires_train %>%
imputate_na(tmax,method = "mean")
fires_train$tmax <- fires_train %>%
imputate_na(tmax,method = "mean")
library(readr)
library(dplyr)
library(tidyverse)
library(dlookr)
library(parzer)
library('rnoaa')
library(base)
require(devtools)
require(graphics)
library(rpart)
library(rpart.plot)
require(randomForest)
clean_pre_processing_data <- function(file) {
file <- file %>% select(-c("extinction_date","extinction_hour", "firstInterv_date", "firstInterv_hour", "alert_source"))
# Fill the missing values
file <- file %>% arrange(region) %>% group_by(district) %>% fill(region)
# Normalize the areas values
file$total_area <- file %>% mutate(total_area = as.numeric(transform(total_area, method = "minmax"))) %>% pull(total_area)
file$timePeriod <- NA
for(x in 1:length(file$id)) {
if(isTRUE(file$alert_hour[x]<as.difftime("06:00:00"))){
file$timePeriod[x] = "Madrugada"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("12:00:00"))){
file$timePeriod[x] ="Manhã"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("18:00:00"))){
file$timePeriod[x] ="Tarde"
}
else if(isTRUE(file$alert_hour[x]<=as.difftime("23:59:59"))){
file$timePeriod[x] = "Noite"
}
}
file$lat <- gsub('1900-01-01','',file$lat)
file$lat <- str_replace(file$lat,',','.')
file$lon <- str_replace(file$lon,',','.')
file$lat <- strtrim(file$lat, 9)
file$lon <- strtrim(file$lon, 9)
# Format the latitude and longitude
file <- file %>% mutate(lat=parse_lat(lat), lon=parse_lon(lon))
file <- file %>% mutate(lat = na_if(lat, "NaN"), lon = na_if(lon, "NaN"))
# Convert the alert_date for the correct format
file <- file %>% mutate(alert_date=format(alert_date,format="%Y-%m-%d"))
# Return the file "clean"
return (file)
}
get_temperature <- function(tempdata){
options(noaakey = "mqEuOSuAUjyuGlTjVjxxCpzRlbrooRnr")
load("station_data.Rdata")
for(i in 1: length(tempdata$id)){
df <- data.frame(
id = c(tempdata$district[i]),
latitude = c(tempdata$lat[i]),
longitude = c(tempdata$lon[i]),
stringsAsFactors = FALSE
)
#Get nearby stations that can provide the mean average temperature (TAVG)
nearby_stations <-  meteo_nearby_stations(lat_lon_df = df,
station_data = station_data, radius = 1000,
var = c("TMAX"),
year_min = 2014, year_max = 2015)
#Get TMAX data
weather_data <- ghcnd_search(nearby_stations[[1]]$id[3], var = c("TMAX") , date_min = tempdata$alert_date[i] , date_max = tempdata$alert_date[i])
temp <- do.call(rbind.data.frame, weather_data['tmax'])
print(tempdata$id[i])
tempdata$tmax[i] <- temp$tmax[1]
}
return(tempdata)
}
############ Task 1: Data importation, clean-up and pre-processing ############
# Data clean-up and pre-processing steps.
fires_train <- read_csv("fires_train.csv", na= c("NA","", "-"), col_names = TRUE)
fires_test <- read_csv("fires_test.csv", na= c("NA","", "-"), col_names = TRUE)
# Preparing the files for Task 2
fires_train <- clean_pre_processing_data(fires_train)
#fires_test <- clean_pre_processing_data(fires_test)
fires_train <- fires_train[-c(10:10309), ]
# Initialize the column of the temperatures
fires_train$tmax <- NA
fires_test$tmax <- NA
# Get the temperatures
fires_train <- get_temperature(fires_train)
#fires_test <- get_temperature(fires_train)
fires_train$tmax <- fires_train %>%
imputate_na(tmax,method = "mean")
library(readr)
library(dplyr)
library(tidyverse)
library(dlookr)
library(parzer)
library('rnoaa')
library(base)
require(devtools)
require(graphics)
library(rpart)
library(rpart.plot)
require(randomForest)
clean_pre_processing_data <- function(file) {
file <- file %>% select(-c("extinction_date","extinction_hour", "firstInterv_date", "firstInterv_hour", "alert_source"))
# Fill the missing values
file <- file %>% arrange(region) %>% group_by(district) %>% fill(region)
# Normalize the areas values
file$total_area <- file %>% mutate(total_area = as.numeric(transform(total_area, method = "minmax"))) %>% pull(total_area)
file$timePeriod <- NA
for(x in 1:length(file$id)) {
if(isTRUE(file$alert_hour[x]<as.difftime("06:00:00"))){
file$timePeriod[x] = "Madrugada"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("12:00:00"))){
file$timePeriod[x] ="Manhã"
}
else if(isTRUE(file$alert_hour[x]<as.difftime("18:00:00"))){
file$timePeriod[x] ="Tarde"
}
else if(isTRUE(file$alert_hour[x]<=as.difftime("23:59:59"))){
file$timePeriod[x] = "Noite"
}
}
file$lat <- gsub('1900-01-01','',file$lat)
file$lat <- str_replace(file$lat,',','.')
file$lon <- str_replace(file$lon,',','.')
file$lat <- strtrim(file$lat, 9)
file$lon <- strtrim(file$lon, 9)
# Format the latitude and longitude
file <- file %>% mutate(lat=parse_lat(lat), lon=parse_lon(lon))
file <- file %>% mutate(lat = na_if(lat, "NaN"), lon = na_if(lon, "NaN"))
# Convert the alert_date for the correct format
file <- file %>% mutate(alert_date=format(alert_date,format="%Y-%m-%d"))
# Return the file "clean"
return (file)
}
get_temperature <- function(tempdata){
options(noaakey = "mqEuOSuAUjyuGlTjVjxxCpzRlbrooRnr")
load("station_data.Rdata")
for(i in 1: length(tempdata$id)){
df <- data.frame(
id = c(tempdata$district[i]),
latitude = c(tempdata$lat[i]),
longitude = c(tempdata$lon[i]),
stringsAsFactors = FALSE
)
#Get nearby stations that can provide the mean average temperature (TAVG)
nearby_stations <-  meteo_nearby_stations(lat_lon_df = df,
station_data = station_data, radius = 1000,
var = c("TMAX"),
year_min = 2014, year_max = 2015)
#Get TMAX data
weather_data <- ghcnd_search(nearby_stations[[1]]$id[3], var = c("TMAX") , date_min = tempdata$alert_date[i] , date_max = tempdata$alert_date[i])
temp <- do.call(rbind.data.frame, weather_data['tmax'])
print(tempdata$id[i])
tempdata$tmax[i] <- temp$tmax[1]
}
return(tempdata)
}
############ Task 1: Data importation, clean-up and pre-processing ############
# Data clean-up and pre-processing steps.
fires_train <- read_csv("fires_train.csv", na= c("NA","", "-"), col_names = TRUE)
fires_test <- read_csv("fires_test.csv", na= c("NA","", "-"), col_names = TRUE)
# Preparing the files for Task 2
fires_train <- clean_pre_processing_data(fires_train)
#fires_test <- clean_pre_processing_data(fires_test)
fires_train <- fires_train[-c(10:10309), ]
# Initialize the column of the temperatures
fires_train$tmax <- NA
fires_test$tmax <- NA
# Get the temperatures
fires_train <- get_temperature(fires_train)
#fires_test <- get_temperature(fires_train)
fires_train$tmax <- fires_train %>%
imputate_na(tmax,method = "mean")
View(fires_train)
